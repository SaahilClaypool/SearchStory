@using System.IO;

<div>
    <InputFile multiple OnChange="@OnFileChange" />
    <button class="btn btn-primary" @onclick="AddDocument">Index</button>
</div>


@code {
    [Inject]
    AddDocument DocumentAdder { get; set; }

    [Inject]
    ILogger<Add> Logger { get; set; }

    [Inject]
    DirectoryService Dirs { get; set; }

    IEnumerable<IBrowserFile>? NewFiles = null;

    public async Task AddDocument()
    {
        if (NewFiles is not null)
        {
            var count = NewFiles.Count();
            foreach (var (newFile, index) in NewFiles.WithIndex())
            {
                var localFilePath = Dirs.TempDir.FullName + newFile.Name;
                Console.WriteLine($"Writing {localFilePath}\n");
                using (var localFile = System.IO.File.OpenWrite(localFilePath))
                {
                    await newFile
                        .OpenReadStream(maxAllowedSize: 1_000_000_000)
                        .CopyToAsync(localFile);
                }
                Console.WriteLine($"Adding to index {localFilePath}\n");
                // TODO: move into add many files use case
                var shouldFlush = index == count - 1 || index % 20 == 0;
                await DocumentAdder.Execute(new(localFilePath, shouldFlush));
            }
            NewFiles = null;
        }
    }

    public void OnFileChange(InputFileChangeEventArgs args)
    {
        const int MAX_COUNT = 10000;
        if (args.FileCount > MAX_COUNT)
        {
            Console.WriteLine($"Error: too many files entered - max is {MAX_COUNT}");
            return;
        }
        NewFiles = args.GetMultipleFiles(MAX_COUNT);
    }
}
