<div class="flex flex-col">
    <InputFile multiple OnChange="@OnFileChange" />
    <button class="bg-blue-200 rounded border p-2 text-l bold" @onclick="Execute">Index</button>
    @if (NewFiles is not null)
    {
          <div class="relative pt-1 w-full">
            <div class="overflow-hidden h-5 mb-4 flex rounded bg-blue-200">
                <div style=@($"width:{(int)(Progress())}%")
                    class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-pink-500">
                    @indexed / @NewFiles.Count()
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Inject]
    AddDocuments DocumentAdder { get; set; } = null!;

    [Inject]
    ILogger<Add> Logger { get; set; } = null!;

    [Inject]
    DirectoryService Dirs { get; set; }

    IEnumerable<IBrowserFile>? NewFiles = null;

    int indexed = 0;

    public int Progress() => (int)(indexed * 100.0 / NewFiles.Count());

    public async Task Execute()
    {
        if (NewFiles is not null)
        {
            var count = NewFiles.Count();
            var files = new List<string>();
            var index = 0;
            foreach (var newFile in NewFiles)
            {
                var localFilePath = Dirs.TempDir.FullName + newFile.Name;
                Console.WriteLine($"Writing {localFilePath}\n");
                using (var localFile = System.IO.File.OpenWrite(localFilePath))
                {
                    await newFile
                        .OpenReadStream(maxAllowedSize: 1_000_000_000)
                        .CopyToAsync(localFile);
                }
                files.Add(localFilePath);
                indexed = index++ + 1;
                StateHasChanged();
            }

            index = 0;
            await foreach (var result in DocumentAdder.Execute(new(files)))
            {
                indexed = index++ + 1;
                StateHasChanged();
            }
            NewFiles = null;
        }
    }

    public void OnFileChange(InputFileChangeEventArgs args)
    {
        const int MAX_COUNT = 10000;
        if (args.FileCount > MAX_COUNT)
        {
            Console.WriteLine($"Error: too many files entered - max is {MAX_COUNT}");
            return;
        }
        NewFiles = args.GetMultipleFiles(MAX_COUNT);
    }
}
