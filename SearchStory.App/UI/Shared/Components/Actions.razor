@inherits ReactiveComponent

@using SearchStory.App.API
@using System.Net.Http
@using System.Net.Http.Json
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider


@inject NavigationManager UriHelper
@inject HttpClient Http

<div class="Actions flex flex-col space-y-4 items-center">
    @if (State.Value.User is not null)
    {
        <button @onclick="ShowLoginModal">
            <p>Logged in as: @State.Value.User.Identity.Name</p>
        </button>
    }
    <div class="flex flex-row">
        @if (State.Value.LoggedIn)
        {
            <svg class="inline-block h-4 w-4 xmlns=" http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                    clip-rule="evenodd" />
            </svg>
        }
        else
        {
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <button @onclick="ShowLoginModal">
                Login
            </button>
        }
    </div>
    <button @onclick="ShowAddFile">
        <svg class="h-8 w-8" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
    </button>
    <button @onclick="ShowAddDirectory">
        <svg class="h-8 w-8" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
        </svg>
    </button>
    <ClearButton />
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Key = "LoggedIn";
        var user = await GetClaimsPrincipalData();
        if (user.Identity.IsAuthenticated)
        {
            State.Update(s => 
            {
                s.User  = user; 
                s.LoggedIn = true;
            });
        }
    }
    [Inject] LoginService Login { get; set; } = null!;
    string Password = "";

    [CascadingParameter] public IModalService Modal { get; set; } = null!;

    void ShowAddFile()
    {
        State.Update(() => State.Value.VisibleControl = AppState.VisibleControlType.AddFile);
    }

    void ShowAddDirectory()
    {
        State.Update(() => State.Value.VisibleControl = AppState.VisibleControlType.AddDirectory);
    }

    void ShowLoginModal()
    {
        var parameters = new ModalParameters();
        Modal.Show<LoginControl >("Login");
    }

    private async Task<ClaimsPrincipal> GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user;
    }
}