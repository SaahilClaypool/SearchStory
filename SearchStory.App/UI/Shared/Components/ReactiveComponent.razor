@implements IDisposable
@code {
    [CascadingParameter]
    public virtual StateContainer State { get; set; } = null!;
    [Parameter] public string? Key { get; set; } = null;
    protected override Task OnInitializedAsync()
    {
        if (State != null)
        {
            State.OnChange += OnChange;
        }
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        if (State != null)
        {
            State.OnChange -= OnChange;
        }
    }
    
    public void OnChange(string? key = null)
    {
        if (Key is null || key == Key)
        {
            StateHasChanged();
        }
    }
}