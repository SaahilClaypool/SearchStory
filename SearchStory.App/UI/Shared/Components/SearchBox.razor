<div class="flex flex-col items-center flex-auto flex-grow-0 flex-grow">
    <div class="flex items-center">
        <input class="flex-auto form-control form-control-lg rounded-lg border bg-gray-100 text-xl shadow m-5 p-3"
            type="text" @oninput="OnInput" placeholder="type to search" autofocus />
        <svg class="flex-none h-10 w-10" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
            stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
    </div>

    <div class="results overflow-y-auto flex-grow-0 space-y-4 w-full border-t rounded-t-xl">
        @if (Results is not null)
        {
            foreach (var result in Results)
            {
                <FileResults Result=@result />
            }
        }
    </div>
    <style>
        @*Usinginlinestyleherebecausethehtmlisrawfrombackend*@.highlight {
            text-decoration: underline;
            background-color: rgba(219, 234, 254, 1);
        }
    </style>
</div>

@code {
    const int PREVIEW_DELAY_MS = 600;
    const int SEARCH_DELAY_MS = 200;
    string currentQuery = "";
    [Inject] LuceneReader Reader { get; set; } = null!;
    [Inject] StateContainer State { get; set; } = null!;
    private IEnumerable<LuceneReader.SearchResult>? Results = null;
    private async Task OnInput(ChangeEventArgs ev)
    {
        var query = ev.Value!.ToString()!;
        currentQuery = query;
        await Task.Delay(SEARCH_DELAY_MS);
        
        // debounce - exit early if query has changed
        if (currentQuery != query)
        {
            return;
        }


        var results = Reader.Search(query, State.Value.User?.Identity?.Name);
        if (results.Any(r => r.HighlightedSnippets.Count() > 0)) // At least one result needs highlights
        {
            Results = results;
        }
        if (string.IsNullOrEmpty(query))
        {
            Results = null;
        }

        
        if (Results?.FirstOrDefault() is LuceneReader.SearchResult result && State.Value.AutoPreviewFirstResult)
        {
            await Task.Delay(PREVIEW_DELAY_MS - SEARCH_DELAY_MS);
            if (currentQuery == query)
            {
                // only update preview if no new query has been made since timer started
                State.Update(s => s.PreviewHref = $"Document/{result.BasePath}");
            }
        }
    }
}